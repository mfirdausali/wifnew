// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum Role {
  ADMIN
  SALES
  FINANCE
  OPERATIONS
}

// Enum for user status
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

// User model
model User {
  id                String      @id @default(uuid())
  email             String      @unique
  username          String      @unique
  password          String
  firstName         String
  lastName          String
  role              Role        @default(OPERATIONS)
  status            UserStatus  @default(PENDING_VERIFICATION)
  emailVerified     Boolean     @default(false)
  emailVerifiedAt   DateTime?
  lastLoginAt       DateTime?
  failedLoginAttempts Int      @default(0)
  lockedUntil       DateTime?
  profileImage      String?
  phoneNumber       String?
  department        String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  sessions          Session[]
  passwordResets    PasswordReset[]
  auditLogs         AuditLog[]
  notifications     Notification[]
  
  @@index([email])
  @@index([username])
  @@index([role])
  @@index([status])
}

// Session model for managing user sessions
model Session {
  id            String   @id @default(uuid())
  userId        String
  token         String   @unique
  refreshToken  String   @unique
  ipAddress     String?
  userAgent     String?
  isValid       Boolean  @default(true)
  expiresAt     DateTime
  lastUsedAt    DateTime @default(now())
  createdAt     DateTime @default(now())
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([refreshToken])
  @@index([userId])
}

// Password reset tokens
model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}

// Audit log for tracking user actions
model AuditLog {
  id          String   @id @default(uuid())
  userId      String?
  action      String
  resource    String
  resourceId  String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  // Relations
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
}

// Notification model
model Notification {
  id          String   @id @default(uuid())
  userId      String
  title       String
  message     String
  type        String   // 'info', 'warning', 'error', 'success'
  read        Boolean  @default(false)
  readAt      DateTime?
  metadata    Json?
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, read])
  @@index([createdAt])
}